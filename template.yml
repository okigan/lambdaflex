AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: Serverless application with API Gateway, Lambda, and scaling alarms.

Parameters:
  paramDomainName:
    Type: String
    Description: "The domain name for the ACM certificate (e.g., your-custom-domain-name.example.com)"

  paramHostedZoneId:
    Type: String
    Description: "The Route 53 hosted zone ID for the domain name (e.g., Z1ABCDEF123456)"

  paramWithFargate:
    Type: String
    Description: "The Route 53 hosted zone ID for the domain name (e.g., Z1ABCDEF123456)"
    Default: false
    AllowedValues: [true, false]
    
Conditions:
  condWithFargate: !Equals [!Ref paramWithFargate, "true"]
  condWithoutFargate: !Equals [!Ref paramWithFargate, "false"]
Globals:
  Function:
    Timeout: 10

Resources:
  MyLambdaFunction:
    Type: "AWS::Serverless::Function"
    Description: "Lambda function to scale up the concurrency limit (deploy trigger 1)"
    Properties:
      PackageType: Image
      Events:
        MyApi:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref MyServerlessApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./src
      DockerTag: latest
# 


  HighConcurrencySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "High Concurrency Alarm SNS Topic"
      TopicName: "HighConcurrencySNSTopic"

  LowConcurrencySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Low Concurrency Alarm SNS Topic"
      TopicName: "LowConcurrencySNSTopic"

  # HighConcurrencySNSSubscription:
  #   Condition: condWithoutFargate
  #   Type: AWS::SNS::Subscription
  #   Properties:
  #     Protocol: "lambda"
  #     TopicArn: !Ref HighConcurrencySNSTopic
  #     Endpoint: !GetAtt ScaleUpLambdaFunction.Arn

  # LowConcurrencySNSSubscription:
  #   Condition: condWithFargate
  #   Type: AWS::SNS::Subscription
  #   Properties:
  #     Protocol: "lambda"
  #     TopicArn: !Ref LowConcurrencySNSTopic
  #     Endpoint: !GetAtt ScaleDownLambdaFunction.Arn


  HighConcurrencyAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      # MetricName: ConcurrentExecutions
      MetricName: Invocations
      Namespace: "AWS/Lambda"
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 100
      ComparisonOperator: "GreaterThanThreshold"
      AlarmDescription: "Alarm when Lambda concurrency exceeds the threshold"
      AlarmActions:
        - !Ref HighConcurrencySNSTopic
      Dimensions:
        - Name: FunctionName
          Value: !Ref MyLambdaFunction
      TreatMissingData: "notBreaching"

  ScaleUpLambdaFunction:
    Type: "AWS::Serverless::Function"
    Description: "Lambda function to scale up the concurrency limit (deploy trigger 2)"
    Properties:
      Timeout: 900
      CodeUri: scale/
      Handler: scale.lambda_scale_up_handler
      Runtime: python3.8
      Environment:
        Variables:
          LAMBDA_FUNCTION_NAME: !GetAtt MyLambdaFunction.Arn
          STACK_NAME: !Ref AWS::StackName
      Policies:
        - Version: "2012-10-17"
          Statement:
            - 
              Effect: Allow
              Action:
              # - cloudformation:CreateStack
              # - cloudformation:DeleteStack
              # - cloudformation:DescribeStacks
              # - cloudformation:UpdateStack
              # - ec2:CreateInternetGateway
              # - ec2:CreateVpc
              # - ec2:DescribeInternetGateways
              # - ec2:DescribeVpcs
              # - ec2:ModifyVpcAttribute
              # - ecs:CreateCluster
              # - ecs:DeleteCluster
              # - ecs:DescribeClusters
              # - ec2:DeleteInternetGateway
              # - ec2:DeleteVpc
              # - iam:CreateRole
              # - iam:DeleteRole
              # - iam:DeleteRolePolicy
              # - iam:PutRolePolicy
              # - lambda:GetAlias
              # - lambda:GetFunction
              # - lambda:ListVersionsByFunction
              # - ec2:CreateSecurityGroup
              # - ec2:DescribeAvailabilityZones
              # - elasticloadbalancing:DescribeTargetGroup
              - cloudformation:*
              - ec2:*
              - ecs:*
              - iam:*
              - lambda:*
              - elasticloadbalancing:*
              - route53:GetHostedZone
              - route53:ChangeResourceRecordSets
              - route53:GetChange
              - route53:*
              Resource: "*"
      Events:
        alarm:
          Type: SNS
          Properties:
            Topic: !Ref HighConcurrencySNSTopic


      # Events:
      #   HighConcurrencyTrigger:
      #     Type: CloudWatchEvent
      #     Properties:
      #       Pattern:
      #         source:
      #           - "aws.cloudwatch"
      #         detail-type:
      #           - "CloudWatch Alarm State Change"
      #         detail:
      #           state:
      #             value:
      #               - "ALARM"
      #           alarmName:
      #             - Ref: HighConcurrencyAlarm

  LowConcurrencyAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      # MetricName: ConcurrentExecutions
      MetricName: Invocations
      Namespace: "AWS/Lambda"
      Statistic: "Sum"
      Period: 7200
      EvaluationPeriods: 1
      Threshold: 20
      ComparisonOperator: "LessThanThreshold"
      AlarmDescription: "Alarm when Lambda concurrency drops below the threshold"
      AlarmActions:
        - !Ref LowConcurrencySNSTopic
      Dimensions:
        - Name: FunctionName
          Value: !Ref MyLambdaFunction

  ScaleDownLambdaFunction:
    Type: "AWS::Serverless::Function"
    Description: "Lambda function to scale down the concurrency limit (deploy trigger 2)"
    Properties:
      Timeout: 900
      CodeUri: scale/
      Handler: scale.lambda_scale_down_handler
      Runtime: python3.8
      Environment:
        Variables:
          LAMBDA_FUNCTION_NAME: !GetAtt MyLambdaFunction.Arn
          STACK_NAME: !Ref AWS::StackName
      Policies:
        - Version: "2012-10-17"
          Statement:
            - 
              Effect: Allow
              Action:
              # - cloudformation:CreateStack
              # - cloudformation:DeleteStack
              # - cloudformation:DescribeStacks
              # - cloudformation:UpdateStack
              # - ec2:CreateInternetGateway
              # - ec2:CreateVpc
              # - ec2:DescribeInternetGateways
              # - ec2:DescribeVpcs
              # - ec2:ModifyVpcAttribute
              # - ecs:CreateCluster
              # - ecs:DeleteCluster
              # - ecs:DescribeClusters
              # - ec2:DeleteInternetGateway
              # - ec2:DeleteVpc
              # - iam:CreateRole
              # - iam:DeleteRole
              # - iam:DeleteRolePolicy
              # - iam:PutRolePolicy
              # - lambda:GetAlias
              # - lambda:GetFunction
              # - lambda:ListVersionsByFunction
              # - ec2:CreateSecurityGroup
              # - ec2:DescribeAvailabilityZones
              # - elasticloadbalancing:DescribeTargetGroup
              - cloudformation:*
              - ec2:*
              - ecs:*
              - iam:*
              - lambda:*
              - elasticloadbalancing:*
              - route53:GetHostedZone
              - route53:ChangeResourceRecordSets
              - route53:GetChange
              - route53:*
              - apigateway:GET 
              Resource: "*"
      Events:
        alarm:
          Type: SNS
          Properties:
            Topic: !Ref LowConcurrencySNSTopic
      # Events:
      #   LowConcurrencyTrigger:
      #     Type: CloudWatchEvent
      #     Properties:
      #       Pattern:
      #         source:
      #           - "aws.cloudwatch"
      #         detail-type:
      #           - "CloudWatch Alarm State Change"
      #         detail:
      #           state:
      #             value:
      #               - "ALARM"
      #           alarmName:
      #             - Ref: LowConcurrencyAlarm

  MyServerlessApi:
    Type: "AWS::Serverless::Api"
    Properties:
      # Domain:
      #   DomainName: !Ref paramDomainName
      #   CertificateArn: !Ref AcmCertificate
      #   # Route53:
      #   #   HostedZoneId: !Ref paramHostedZoneId
      #   #   SetIdentifier: rd_01
      EndpointConfiguration: REGIONAL
      StageName: prod

  AcmCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Ref paramDomainName
      ValidationMethod: DNS

  MyRoute53RecordSetApiGateway:
    Condition: condWithoutFargate
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref paramDomainName
      HostedZoneId: !Ref paramHostedZoneId
      Type: A
      SetIdentifier: rd_01
      Weight: 1
      AliasTarget:
        DNSName: !GetAtt DeliveryApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt DeliveryApiDomainName.RegionalHostedZoneId
        EvaluateTargetHealth: false
        # # Use the fixed Hosted Zone ID for API Gateway regional endpoints provided by AWS for your specific region.
        # # For example, this is the Hosted Zone ID for API Gateway in us-east-1 region.
        # HostedZoneId: Z1UJRXOUMOOFQ8
        # # The regional domain name attribute you need to use here is DistributionDomainName due to the API Gateway being created as an AWS::Serverless::Api.
        # DNSName: !Sub ${MyServerlessApi.RootResourceId}.execute-api.${AWS::Region}.amazonaws.com

  # DeliveryApi:
  #   Type: AWS::ApiGateway::RestApi
  #   Properties:
  #     EndpointConfiguration:
  #       Types:
  #         - REGIONAL

  DeliveryApiDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      RegionalCertificateArn: !Ref AcmCertificate
      DomainName: !Ref paramDomainName
      EndpointConfiguration:
        Types:
          - REGIONAL

  DeliveryApiBasePathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Properties:
      DomainName: !Ref DeliveryApiDomainName
      RestApiId: !Ref MyServerlessApi
      Stage: !Ref MyServerlessApi.Stage

  # DeliveryApiRoute53RecordSetGroup:
  #   Type: AWS::Route53::RecordSetGroup
  #   Properties:
  #     HostedZoneId: !Ref paramHostedZoneId
  #     RecordSets:
  #       - Name: !Ref paramDomainName # Your chosen subdomain
  #         Type: A
  #         AliasTarget:
  #         HostedZoneId: !GetAtt DeliveryApiDomainName.DistributionHostedZoneId
  #         DNSName: !GetAtt DeliveryApiDomainName.DistributionDomainName
  #       - Name: !Ref paramDomainName
  #         Type: AAAA
  #         AliasTarget:
  #           HostedZoneId: !GetAtt DeliveryApiDomainName.DistributionHostedZoneId
  #           DNSName: !GetAtt DeliveryApiDomainName.DistributionDomainName

  # Network resources
  MyVPC:
    Condition: condWithFargate
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # public section
  MyInternetGateway:
    Condition: condWithFargate
    Type: "AWS::EC2::InternetGateway"

  GatewayAttachment:
    Condition: condWithFargate
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicSubnetOne:
    Condition: condWithFargate
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true

  PublicSubnetTwo:
    Condition: condWithFargate
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Condition: condWithFargate
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Condition: condWithFargate
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref MyInternetGateway

  PublicSubnetOneRouteTableAssociation:
    Condition: condWithFargate
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetTwoRouteTableAssociation:
    Condition: condWithFargate
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # private section
  # # NAT Gateway EIP
  # NATGatewayEIP:
  #   Type: 'AWS::EC2::EIP'
  #   DependsOn: GatewayAttachment
  #   Properties:
  #   Domain: vpc

  # # NAT Gateway
  # NATGateway:
  #   Type: 'AWS::EC2::NatGateway'
  #   Properties:
  #   AllocationId: !GetAtt NATGatewayEIP.AllocationId
  #   SubnetId: !Ref PublicSubnetOne

  # PrivateSubnetOne:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #   VpcId: !Ref MyVPC
  #   CidrBlock: '10.0.3.0/24'
  #   AvailabilityZone: !Select [0, !GetAZs '']

  # PrivateSubnetTwo:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #   VpcId: !Ref MyVPC
  #   CidrBlock: '10.0.4.0/24'
  #   AvailabilityZone: !Select [1, !GetAZs '']

  # PrivateRouteTable:
  #   Type: 'AWS::EC2::RouteTable'
  #   Properties:
  #   VpcId: !Ref MyVPC

  # PrivateRoute:
  #   Type: 'AWS::EC2::Route'
  #   Properties:
  #   RouteTableId: !Ref PrivateRouteTable
  #   DestinationCidrBlock: '0.0.0.0/0'
  #   NatGatewayId: !Ref NATGateway

  # PrivateSubnetOneRouteTableAssociation:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #   SubnetId: !Ref PrivateSubnetOne
  #   RouteTableId: !Ref PrivateRouteTable

  # PrivateSubnetTwoRouteTableAssociation:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #   SubnetId: !Ref PrivateSubnetTwo
  #   RouteTableId: !Ref PrivateRouteTable

  # ECS resources
  ECSCluster:
    Condition: condWithFargate
    Type: "AWS::ECS::Cluster"

  # IAM Roles for ECS
  ECSExecutionRole:
    Condition: condWithFargate
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "ECSTaskExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  ECSTaskRole:
    Condition: condWithFargate
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "ECSTaskRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                Resource:
                  "arn:aws:dynamodb:your-region:your-account-id:table/YourDynamoDBTable"
                  # Add any additional permissions needed by the tasks

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy1
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: Allow
                Action: "logs:*"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: LambdaExecutionPolicy2
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: Allow
                Action: "lambda:*"
                Resource: "*"

  ImageUriExtractorLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json

          def lambda_handler_inner(event, context):
            try:
              lambda_client = boto3.client('lambda')
              function_name = event['ResourceProperties']['LambdaArn']
              
              response = lambda_client.get_function(FunctionName=function_name)
              image_uri = response['Code']['ImageUri']
              responseData = {'ImageUri': image_uri}
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            except Exception as e:
              errorMessage = str(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, errorMessage)

          def lambda_handler(event, context):
            print("event: " + json.dumps(event))
            print("context: " + str(context))

            result = lambda_handler_inner(event, context)

            print("result: " + str(result))

            return result

      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 30

  LambdaImageUriCustomResource:
    Type: "Custom::LambdaImageUriExtractor"
    Properties:
      ServiceToken: !GetAtt ImageUriExtractorLambda.Arn
      LambdaArn: !Ref MyLambdaFunction

  FargateTaskDefinition:
    Condition: condWithFargate
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: "fastapitask"
      Cpu: "256"
      Memory: "512"
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: "fastapic1"
          Image: !GetAtt LambdaImageUriCustomResource.ImageUri
          PortMappings:
            - 
              ContainerPort: 8080
              HostPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/MyLogGroup
              awslogs-region: us-east-1 # adjust the region if needed
              awslogs-stream-prefix: MyContainer

  # Security group for the Fargate tasks and ALB
  FargateSecurityGroup:
    Condition: condWithFargate
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for Fargate tasks"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  FargateService:
    Condition: condWithFargate
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref FargateTaskDefinition
      LaunchType: "FARGATE"
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo
          SecurityGroups:
            - !Ref FargateSecurityGroup
      LoadBalancers:
        - ContainerName: "fastapic1"
          ContainerPort: 8080
          # LoadBalancerName: fastapi-alb
          TargetGroupArn: !GetAtt ALBTargetGroup.TargetGroupArn
    DependsOn:
      - ALB
      - ALBListener80
      - ALBListener443

  # ALB section

  # Security Group for the ALB
  ALBSecurityGroup:
    Condition: condWithFargate
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Access to the ALB"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"

  # Load balancer resources
  ALB:
    Condition: condWithFargate
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: anyscale0-alb
      Scheme: "internet-facing"
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups:
        - !Ref FargateSecurityGroup
      Type: "application"
    DependsOn:
      - MyInternetGateway

  ALBListener80:
    Condition: condWithFargate
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !GetAtt ALBTargetGroup.TargetGroupArn
      LoadBalancerArn: !Ref ALB
      Port: "80"
      Protocol: "HTTP"

  ALBListener443:
    Condition: condWithFargate
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates:
        - CertificateArn: !Ref AcmCertificate
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !GetAtt ALBTargetGroup.TargetGroupArn
      LoadBalancerArn: !Ref ALB
      Port: "443"
      Protocol: "HTTPS"

  ALBTargetGroup:
    Condition: condWithFargate
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 8080
      Protocol: "HTTP"
      VpcId: !Ref MyVPC
      Matcher:
        HttpCode: "200-499"
      TargetType: ip

  MyRoute53RecordSetFargate:
    Condition: condWithFargate
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref paramDomainName
      HostedZoneId: !Ref paramHostedZoneId
      Type: A
      SetIdentifier: rd_02
      Weight: 200
      AliasTarget:
        DNSName: !GetAtt ALB.DNSName
        HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID
        EvaluateTargetHealth: true
      HealthCheckId: !Ref MyHealthCheck


  MyHealthCheck:
    Condition: condWithFargate
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Type: HTTPS  # Use HTTP or HTTPS based on your application protocol
        ResourcePath: /  # Adjust the path as needed
        FullyQualifiedDomainName: !GetAtt ALB.DNSName
        Port: 443  # Adjust the port based on your application configuration
        RequestInterval: 30  # Adjust the interval based on your application needs
        FailureThreshold: 3  # Adjust the threshold based on your application needs
# Outputs:
# WebEndpoint:
#   Description: "API Gateway endpoint URL for Prod stage"
#   Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

# MyLambdaFunctionConcurrentExecutionMetric:
#   Description: "The CloudWatch metric for concurrent Lambda executions"
#   Value: !GetAtt HighConcurrencyAlarm.MetricName

